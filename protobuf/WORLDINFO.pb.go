// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.1
// source: WORLDINFO.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WORLDINFO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId                    *uint32            `protobuf:"varint,1,req,name=map_id,json=mapId" json:"map_id,omitempty"`
	Time                     *uint32            `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	GroupList                []*GROUPINCHAPTER  `protobuf:"bytes,3,rep,name=group_list,json=groupList" json:"group_list,omitempty"`
	Round                    *uint32            `protobuf:"varint,4,opt,name=round" json:"round,omitempty"`
	TaskFinishCount          *uint32            `protobuf:"varint,5,opt,name=task_finish_count,json=taskFinishCount" json:"task_finish_count,omitempty"`
	TaskList                 []*TASK_INFO       `protobuf:"bytes,6,rep,name=task_list,json=taskList" json:"task_list,omitempty"`
	SubmarineState           *uint32            `protobuf:"varint,7,req,name=submarine_state,json=submarineState" json:"submarine_state,omitempty"`
	ItemList                 []*WORLD_ITEM_INFO `protobuf:"bytes,8,rep,name=item_list,json=itemList" json:"item_list,omitempty"`
	GoodsList                []*GOODS_INFO      `protobuf:"bytes,9,rep,name=goods_list,json=goodsList" json:"goods_list,omitempty"`
	ActionPower              *uint32            `protobuf:"varint,11,req,name=action_power,json=actionPower" json:"action_power,omitempty"`
	ActionPowerExtra         *uint32            `protobuf:"varint,12,req,name=action_power_extra,json=actionPowerExtra" json:"action_power_extra,omitempty"`
	LastRecoverTimestamp     *uint32            `protobuf:"varint,13,req,name=last_recover_timestamp,json=lastRecoverTimestamp" json:"last_recover_timestamp,omitempty"`
	ActionPowerFetchCount    *uint32            `protobuf:"varint,14,req,name=action_power_fetch_count,json=actionPowerFetchCount" json:"action_power_fetch_count,omitempty"`
	LastChangeGroupTimestamp *uint32            `protobuf:"varint,15,req,name=last_change_group_timestamp,json=lastChangeGroupTimestamp" json:"last_change_group_timestamp,omitempty"`
	EnterMapId               *uint32            `protobuf:"varint,16,req,name=enter_map_id,json=enterMapId" json:"enter_map_id,omitempty"`
	CdList                   []*IDTIMEINFO      `protobuf:"bytes,17,rep,name=cd_list,json=cdList" json:"cd_list,omitempty"`
	BuffList                 []*BUFF_INFO       `protobuf:"bytes,18,rep,name=buff_list,json=buffList" json:"buff_list,omitempty"`
	ChapterList              []*WORLDMAPID      `protobuf:"bytes,19,rep,name=chapter_list,json=chapterList" json:"chapter_list,omitempty"`
	SairenChapter            []uint32           `protobuf:"varint,20,rep,name=sairen_chapter,json=sairenChapter" json:"sairen_chapter,omitempty"`
	MonthBoss                []*KVDATA          `protobuf:"bytes,21,rep,name=month_boss,json=monthBoss" json:"month_boss,omitempty"`
}

func (x *WORLDINFO) Reset() {
	*x = WORLDINFO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WORLDINFO_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WORLDINFO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WORLDINFO) ProtoMessage() {}

func (x *WORLDINFO) ProtoReflect() protoreflect.Message {
	mi := &file_WORLDINFO_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WORLDINFO.ProtoReflect.Descriptor instead.
func (*WORLDINFO) Descriptor() ([]byte, []int) {
	return file_WORLDINFO_proto_rawDescGZIP(), []int{0}
}

func (x *WORLDINFO) GetMapId() uint32 {
	if x != nil && x.MapId != nil {
		return *x.MapId
	}
	return 0
}

func (x *WORLDINFO) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *WORLDINFO) GetGroupList() []*GROUPINCHAPTER {
	if x != nil {
		return x.GroupList
	}
	return nil
}

func (x *WORLDINFO) GetRound() uint32 {
	if x != nil && x.Round != nil {
		return *x.Round
	}
	return 0
}

func (x *WORLDINFO) GetTaskFinishCount() uint32 {
	if x != nil && x.TaskFinishCount != nil {
		return *x.TaskFinishCount
	}
	return 0
}

func (x *WORLDINFO) GetTaskList() []*TASK_INFO {
	if x != nil {
		return x.TaskList
	}
	return nil
}

func (x *WORLDINFO) GetSubmarineState() uint32 {
	if x != nil && x.SubmarineState != nil {
		return *x.SubmarineState
	}
	return 0
}

func (x *WORLDINFO) GetItemList() []*WORLD_ITEM_INFO {
	if x != nil {
		return x.ItemList
	}
	return nil
}

func (x *WORLDINFO) GetGoodsList() []*GOODS_INFO {
	if x != nil {
		return x.GoodsList
	}
	return nil
}

func (x *WORLDINFO) GetActionPower() uint32 {
	if x != nil && x.ActionPower != nil {
		return *x.ActionPower
	}
	return 0
}

func (x *WORLDINFO) GetActionPowerExtra() uint32 {
	if x != nil && x.ActionPowerExtra != nil {
		return *x.ActionPowerExtra
	}
	return 0
}

func (x *WORLDINFO) GetLastRecoverTimestamp() uint32 {
	if x != nil && x.LastRecoverTimestamp != nil {
		return *x.LastRecoverTimestamp
	}
	return 0
}

func (x *WORLDINFO) GetActionPowerFetchCount() uint32 {
	if x != nil && x.ActionPowerFetchCount != nil {
		return *x.ActionPowerFetchCount
	}
	return 0
}

func (x *WORLDINFO) GetLastChangeGroupTimestamp() uint32 {
	if x != nil && x.LastChangeGroupTimestamp != nil {
		return *x.LastChangeGroupTimestamp
	}
	return 0
}

func (x *WORLDINFO) GetEnterMapId() uint32 {
	if x != nil && x.EnterMapId != nil {
		return *x.EnterMapId
	}
	return 0
}

func (x *WORLDINFO) GetCdList() []*IDTIMEINFO {
	if x != nil {
		return x.CdList
	}
	return nil
}

func (x *WORLDINFO) GetBuffList() []*BUFF_INFO {
	if x != nil {
		return x.BuffList
	}
	return nil
}

func (x *WORLDINFO) GetChapterList() []*WORLDMAPID {
	if x != nil {
		return x.ChapterList
	}
	return nil
}

func (x *WORLDINFO) GetSairenChapter() []uint32 {
	if x != nil {
		return x.SairenChapter
	}
	return nil
}

func (x *WORLDINFO) GetMonthBoss() []*KVDATA {
	if x != nil {
		return x.MonthBoss
	}
	return nil
}

var File_WORLDINFO_proto protoreflect.FileDescriptor

var file_WORLDINFO_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x49, 0x4e, 0x46, 0x4f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x07, 0x62, 0x65, 0x6c, 0x66, 0x61, 0x73, 0x74, 0x1a, 0x14, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x49, 0x4e, 0x43, 0x48, 0x41, 0x50, 0x54, 0x45, 0x52, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x15, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x47, 0x4f, 0x4f, 0x44, 0x53, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x49, 0x44, 0x54, 0x49,
	0x4d, 0x45, 0x49, 0x4e, 0x46, 0x4f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x42, 0x55,
	0x46, 0x46, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x57,
	0x4f, 0x52, 0x4c, 0x44, 0x4d, 0x41, 0x50, 0x49, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0c, 0x4b, 0x56, 0x44, 0x41, 0x54, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x07,
	0x0a, 0x09, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x49, 0x4e, 0x46, 0x4f, 0x12, 0x15, 0x0a, 0x06, 0x6d,
	0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x70,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x65, 0x6c,
	0x66, 0x61, 0x73, 0x74, 0x2e, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x49, 0x4e, 0x43, 0x48, 0x41, 0x50,
	0x54, 0x45, 0x52, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x74, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2f, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x65, 0x6c, 0x66, 0x61, 0x73, 0x74, 0x2e, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6d,
	0x61, 0x72, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x62, 0x65, 0x6c, 0x66, 0x61, 0x73, 0x74, 0x2e, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x6c, 0x66, 0x61, 0x73, 0x74, 0x2e,
	0x47, 0x4f, 0x4f, 0x44, 0x53, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0c,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x0d, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x37, 0x0a, 0x18,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x15,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x18, 0x6c, 0x61, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x6c, 0x66, 0x61, 0x73,
	0x74, 0x2e, 0x49, 0x44, 0x54, 0x49, 0x4d, 0x45, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x06, 0x63, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x65, 0x6c, 0x66, 0x61, 0x73,
	0x74, 0x2e, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x08, 0x62, 0x75, 0x66,
	0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65,
	0x6c, 0x66, 0x61, 0x73, 0x74, 0x2e, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x4d, 0x41, 0x50, 0x49, 0x44,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x61, 0x69, 0x72, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x61, 0x69, 0x72, 0x65, 0x6e, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x62, 0x6f,
	0x73, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x65, 0x6c, 0x66, 0x61,
	0x73, 0x74, 0x2e, 0x4b, 0x56, 0x44, 0x41, 0x54, 0x41, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x42, 0x6f, 0x73, 0x73, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66,
}

var (
	file_WORLDINFO_proto_rawDescOnce sync.Once
	file_WORLDINFO_proto_rawDescData = file_WORLDINFO_proto_rawDesc
)

func file_WORLDINFO_proto_rawDescGZIP() []byte {
	file_WORLDINFO_proto_rawDescOnce.Do(func() {
		file_WORLDINFO_proto_rawDescData = protoimpl.X.CompressGZIP(file_WORLDINFO_proto_rawDescData)
	})
	return file_WORLDINFO_proto_rawDescData
}

var file_WORLDINFO_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_WORLDINFO_proto_goTypes = []any{
	(*WORLDINFO)(nil),       // 0: belfast.WORLDINFO
	(*GROUPINCHAPTER)(nil),  // 1: belfast.GROUPINCHAPTER
	(*TASK_INFO)(nil),       // 2: belfast.TASK_INFO
	(*WORLD_ITEM_INFO)(nil), // 3: belfast.WORLD_ITEM_INFO
	(*GOODS_INFO)(nil),      // 4: belfast.GOODS_INFO
	(*IDTIMEINFO)(nil),      // 5: belfast.IDTIMEINFO
	(*BUFF_INFO)(nil),       // 6: belfast.BUFF_INFO
	(*WORLDMAPID)(nil),      // 7: belfast.WORLDMAPID
	(*KVDATA)(nil),          // 8: belfast.KVDATA
}
var file_WORLDINFO_proto_depIdxs = []int32{
	1, // 0: belfast.WORLDINFO.group_list:type_name -> belfast.GROUPINCHAPTER
	2, // 1: belfast.WORLDINFO.task_list:type_name -> belfast.TASK_INFO
	3, // 2: belfast.WORLDINFO.item_list:type_name -> belfast.WORLD_ITEM_INFO
	4, // 3: belfast.WORLDINFO.goods_list:type_name -> belfast.GOODS_INFO
	5, // 4: belfast.WORLDINFO.cd_list:type_name -> belfast.IDTIMEINFO
	6, // 5: belfast.WORLDINFO.buff_list:type_name -> belfast.BUFF_INFO
	7, // 6: belfast.WORLDINFO.chapter_list:type_name -> belfast.WORLDMAPID
	8, // 7: belfast.WORLDINFO.month_boss:type_name -> belfast.KVDATA
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_WORLDINFO_proto_init() }
func file_WORLDINFO_proto_init() {
	if File_WORLDINFO_proto != nil {
		return
	}
	file_GROUPINCHAPTER_proto_init()
	file_TASK_INFO_proto_init()
	file_WORLD_ITEM_INFO_proto_init()
	file_GOODS_INFO_proto_init()
	file_IDTIMEINFO_proto_init()
	file_BUFF_INFO_proto_init()
	file_WORLDMAPID_proto_init()
	file_KVDATA_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_WORLDINFO_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*WORLDINFO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_WORLDINFO_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_WORLDINFO_proto_goTypes,
		DependencyIndexes: file_WORLDINFO_proto_depIdxs,
		MessageInfos:      file_WORLDINFO_proto_msgTypes,
	}.Build()
	File_WORLDINFO_proto = out.File
	file_WORLDINFO_proto_rawDesc = nil
	file_WORLDINFO_proto_goTypes = nil
	file_WORLDINFO_proto_depIdxs = nil
}
