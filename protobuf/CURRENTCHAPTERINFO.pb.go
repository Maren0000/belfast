// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.1
// source: CURRENTCHAPTERINFO.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CURRENTCHAPTERINFO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    *uint32                  `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Time                  *uint32                  `protobuf:"varint,2,req,name=time" json:"time,omitempty"`
	CellList              []*CHAPTERCELLINFO       `protobuf:"bytes,3,rep,name=cell_list,json=cellList" json:"cell_list,omitempty"`
	GroupList             []*GROUPINCHAPTER        `protobuf:"bytes,4,rep,name=group_list,json=groupList" json:"group_list,omitempty"`
	AiList                []*CHAPTERCELLINFO       `protobuf:"bytes,5,rep,name=ai_list,json=aiList" json:"ai_list,omitempty"`
	EscortList            []*CHAPTERCELLINFO       `protobuf:"bytes,6,rep,name=escort_list,json=escortList" json:"escort_list,omitempty"`
	Round                 *uint32                  `protobuf:"varint,7,req,name=round" json:"round,omitempty"`
	IsSubmarineAutoAttack *uint32                  `protobuf:"varint,8,opt,name=is_submarine_auto_attack,json=isSubmarineAutoAttack" json:"is_submarine_auto_attack,omitempty"`
	OperationBuff         []uint32                 `protobuf:"varint,9,rep,name=operation_buff,json=operationBuff" json:"operation_buff,omitempty"`
	ModelActCount         *uint32                  `protobuf:"varint,10,opt,name=model_act_count,json=modelActCount" json:"model_act_count,omitempty"`
	BuffList              []uint32                 `protobuf:"varint,11,rep,name=buff_list,json=buffList" json:"buff_list,omitempty"`
	LoopFlag              *uint32                  `protobuf:"varint,12,opt,name=loop_flag,json=loopFlag" json:"loop_flag,omitempty"`
	ExtraFlagList         []uint32                 `protobuf:"varint,13,rep,name=extra_flag_list,json=extraFlagList" json:"extra_flag_list,omitempty"`
	CellFlagList          []*CELLFLAG              `protobuf:"bytes,14,rep,name=cell_flag_list,json=cellFlagList" json:"cell_flag_list,omitempty"`
	ChapterHp             *uint32                  `protobuf:"varint,15,req,name=chapter_hp,json=chapterHp" json:"chapter_hp,omitempty"`
	ChapterStrategyList   []*STRATEGYINFO          `protobuf:"bytes,16,rep,name=chapter_strategy_list,json=chapterStrategyList" json:"chapter_strategy_list,omitempty"`
	KillCount             *uint32                  `protobuf:"varint,17,req,name=kill_count,json=killCount" json:"kill_count,omitempty"`
	InitShipCount         *uint32                  `protobuf:"varint,18,req,name=init_ship_count,json=initShipCount" json:"init_ship_count,omitempty"`
	ContinuousKillCount   *uint32                  `protobuf:"varint,19,req,name=continuous_kill_count,json=continuousKillCount" json:"continuous_kill_count,omitempty"`
	BattleStatistics      []*STRATEGYINFO          `protobuf:"bytes,20,rep,name=battle_statistics,json=battleStatistics" json:"battle_statistics,omitempty"`
	FleetDuties           []*FLEETDUTYKEYVALUEPAIR `protobuf:"bytes,21,rep,name=fleet_duties,json=fleetDuties" json:"fleet_duties,omitempty"`
	MoveStepCount         *uint32                  `protobuf:"varint,22,req,name=move_step_count,json=moveStepCount" json:"move_step_count,omitempty"`
}

func (x *CURRENTCHAPTERINFO) Reset() {
	*x = CURRENTCHAPTERINFO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CURRENTCHAPTERINFO_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CURRENTCHAPTERINFO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CURRENTCHAPTERINFO) ProtoMessage() {}

func (x *CURRENTCHAPTERINFO) ProtoReflect() protoreflect.Message {
	mi := &file_CURRENTCHAPTERINFO_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CURRENTCHAPTERINFO.ProtoReflect.Descriptor instead.
func (*CURRENTCHAPTERINFO) Descriptor() ([]byte, []int) {
	return file_CURRENTCHAPTERINFO_proto_rawDescGZIP(), []int{0}
}

func (x *CURRENTCHAPTERINFO) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CURRENTCHAPTERINFO) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *CURRENTCHAPTERINFO) GetCellList() []*CHAPTERCELLINFO {
	if x != nil {
		return x.CellList
	}
	return nil
}

func (x *CURRENTCHAPTERINFO) GetGroupList() []*GROUPINCHAPTER {
	if x != nil {
		return x.GroupList
	}
	return nil
}

func (x *CURRENTCHAPTERINFO) GetAiList() []*CHAPTERCELLINFO {
	if x != nil {
		return x.AiList
	}
	return nil
}

func (x *CURRENTCHAPTERINFO) GetEscortList() []*CHAPTERCELLINFO {
	if x != nil {
		return x.EscortList
	}
	return nil
}

func (x *CURRENTCHAPTERINFO) GetRound() uint32 {
	if x != nil && x.Round != nil {
		return *x.Round
	}
	return 0
}

func (x *CURRENTCHAPTERINFO) GetIsSubmarineAutoAttack() uint32 {
	if x != nil && x.IsSubmarineAutoAttack != nil {
		return *x.IsSubmarineAutoAttack
	}
	return 0
}

func (x *CURRENTCHAPTERINFO) GetOperationBuff() []uint32 {
	if x != nil {
		return x.OperationBuff
	}
	return nil
}

func (x *CURRENTCHAPTERINFO) GetModelActCount() uint32 {
	if x != nil && x.ModelActCount != nil {
		return *x.ModelActCount
	}
	return 0
}

func (x *CURRENTCHAPTERINFO) GetBuffList() []uint32 {
	if x != nil {
		return x.BuffList
	}
	return nil
}

func (x *CURRENTCHAPTERINFO) GetLoopFlag() uint32 {
	if x != nil && x.LoopFlag != nil {
		return *x.LoopFlag
	}
	return 0
}

func (x *CURRENTCHAPTERINFO) GetExtraFlagList() []uint32 {
	if x != nil {
		return x.ExtraFlagList
	}
	return nil
}

func (x *CURRENTCHAPTERINFO) GetCellFlagList() []*CELLFLAG {
	if x != nil {
		return x.CellFlagList
	}
	return nil
}

func (x *CURRENTCHAPTERINFO) GetChapterHp() uint32 {
	if x != nil && x.ChapterHp != nil {
		return *x.ChapterHp
	}
	return 0
}

func (x *CURRENTCHAPTERINFO) GetChapterStrategyList() []*STRATEGYINFO {
	if x != nil {
		return x.ChapterStrategyList
	}
	return nil
}

func (x *CURRENTCHAPTERINFO) GetKillCount() uint32 {
	if x != nil && x.KillCount != nil {
		return *x.KillCount
	}
	return 0
}

func (x *CURRENTCHAPTERINFO) GetInitShipCount() uint32 {
	if x != nil && x.InitShipCount != nil {
		return *x.InitShipCount
	}
	return 0
}

func (x *CURRENTCHAPTERINFO) GetContinuousKillCount() uint32 {
	if x != nil && x.ContinuousKillCount != nil {
		return *x.ContinuousKillCount
	}
	return 0
}

func (x *CURRENTCHAPTERINFO) GetBattleStatistics() []*STRATEGYINFO {
	if x != nil {
		return x.BattleStatistics
	}
	return nil
}

func (x *CURRENTCHAPTERINFO) GetFleetDuties() []*FLEETDUTYKEYVALUEPAIR {
	if x != nil {
		return x.FleetDuties
	}
	return nil
}

func (x *CURRENTCHAPTERINFO) GetMoveStepCount() uint32 {
	if x != nil && x.MoveStepCount != nil {
		return *x.MoveStepCount
	}
	return 0
}

var File_CURRENTCHAPTERINFO_proto protoreflect.FileDescriptor

var file_CURRENTCHAPTERINFO_proto_rawDesc = []byte{
	0x0a, 0x18, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x43, 0x48, 0x41, 0x50, 0x54, 0x45, 0x52,
	0x49, 0x4e, 0x46, 0x4f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x62, 0x65, 0x6c, 0x66,
	0x61, 0x73, 0x74, 0x1a, 0x15, 0x43, 0x48, 0x41, 0x50, 0x54, 0x45, 0x52, 0x43, 0x45, 0x4c, 0x4c,
	0x49, 0x4e, 0x46, 0x4f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x49, 0x4e, 0x43, 0x48, 0x41, 0x50, 0x54, 0x45, 0x52, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0e, 0x43, 0x45, 0x4c, 0x4c, 0x46, 0x4c, 0x41, 0x47, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x12, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x49, 0x4e, 0x46, 0x4f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x46, 0x4c, 0x45, 0x45, 0x54, 0x44, 0x55, 0x54, 0x59, 0x4b,
	0x45, 0x59, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x50, 0x41, 0x49, 0x52, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xe2, 0x07, 0x0a, 0x12, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x43, 0x48, 0x41,
	0x50, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x46, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x09,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x65, 0x6c, 0x66, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x48, 0x41, 0x50, 0x54, 0x45,
	0x52, 0x43, 0x45, 0x4c, 0x4c, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x65, 0x6c, 0x66, 0x61, 0x73,
	0x74, 0x2e, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x49, 0x4e, 0x43, 0x48, 0x41, 0x50, 0x54, 0x45, 0x52,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x61,
	0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62,
	0x65, 0x6c, 0x66, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x48, 0x41, 0x50, 0x54, 0x45, 0x52, 0x43, 0x45,
	0x4c, 0x4c, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x06, 0x61, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x0b, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x6c, 0x66, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x48,
	0x41, 0x50, 0x54, 0x45, 0x52, 0x43, 0x45, 0x4c, 0x4c, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x0a, 0x65,
	0x73, 0x63, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x69, 0x73, 0x53, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x41, 0x75,
	0x74, 0x6f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x12,
	0x26, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x41,
	0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x6f, 0x70, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x46, 0x6c, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0e, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x62, 0x65, 0x6c, 0x66, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x45, 0x4c, 0x4c,
	0x46, 0x4c, 0x41, 0x47, 0x52, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x70,
	0x18, 0x0f, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x48,
	0x70, 0x12, 0x49, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x65, 0x6c, 0x66, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x54, 0x52, 0x41, 0x54,
	0x45, 0x47, 0x59, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x13, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69,
	0x6e, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x68, 0x69, 0x70, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75,
	0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x4b, 0x69,
	0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x6c, 0x66, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x54, 0x52,
	0x41, 0x54, 0x45, 0x47, 0x59, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x10, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x5f, 0x64, 0x75, 0x74, 0x69, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x65, 0x6c, 0x66, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x4c, 0x45, 0x45,
	0x54, 0x44, 0x55, 0x54, 0x59, 0x4b, 0x45, 0x59, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x50, 0x41, 0x49,
	0x52, 0x52, 0x0b, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x44, 0x75, 0x74, 0x69, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x16, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66,
}

var (
	file_CURRENTCHAPTERINFO_proto_rawDescOnce sync.Once
	file_CURRENTCHAPTERINFO_proto_rawDescData = file_CURRENTCHAPTERINFO_proto_rawDesc
)

func file_CURRENTCHAPTERINFO_proto_rawDescGZIP() []byte {
	file_CURRENTCHAPTERINFO_proto_rawDescOnce.Do(func() {
		file_CURRENTCHAPTERINFO_proto_rawDescData = protoimpl.X.CompressGZIP(file_CURRENTCHAPTERINFO_proto_rawDescData)
	})
	return file_CURRENTCHAPTERINFO_proto_rawDescData
}

var file_CURRENTCHAPTERINFO_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_CURRENTCHAPTERINFO_proto_goTypes = []any{
	(*CURRENTCHAPTERINFO)(nil),    // 0: belfast.CURRENTCHAPTERINFO
	(*CHAPTERCELLINFO)(nil),       // 1: belfast.CHAPTERCELLINFO
	(*GROUPINCHAPTER)(nil),        // 2: belfast.GROUPINCHAPTER
	(*CELLFLAG)(nil),              // 3: belfast.CELLFLAG
	(*STRATEGYINFO)(nil),          // 4: belfast.STRATEGYINFO
	(*FLEETDUTYKEYVALUEPAIR)(nil), // 5: belfast.FLEETDUTYKEYVALUEPAIR
}
var file_CURRENTCHAPTERINFO_proto_depIdxs = []int32{
	1, // 0: belfast.CURRENTCHAPTERINFO.cell_list:type_name -> belfast.CHAPTERCELLINFO
	2, // 1: belfast.CURRENTCHAPTERINFO.group_list:type_name -> belfast.GROUPINCHAPTER
	1, // 2: belfast.CURRENTCHAPTERINFO.ai_list:type_name -> belfast.CHAPTERCELLINFO
	1, // 3: belfast.CURRENTCHAPTERINFO.escort_list:type_name -> belfast.CHAPTERCELLINFO
	3, // 4: belfast.CURRENTCHAPTERINFO.cell_flag_list:type_name -> belfast.CELLFLAG
	4, // 5: belfast.CURRENTCHAPTERINFO.chapter_strategy_list:type_name -> belfast.STRATEGYINFO
	4, // 6: belfast.CURRENTCHAPTERINFO.battle_statistics:type_name -> belfast.STRATEGYINFO
	5, // 7: belfast.CURRENTCHAPTERINFO.fleet_duties:type_name -> belfast.FLEETDUTYKEYVALUEPAIR
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_CURRENTCHAPTERINFO_proto_init() }
func file_CURRENTCHAPTERINFO_proto_init() {
	if File_CURRENTCHAPTERINFO_proto != nil {
		return
	}
	file_CHAPTERCELLINFO_proto_init()
	file_GROUPINCHAPTER_proto_init()
	file_CELLFLAG_proto_init()
	file_STRATEGYINFO_proto_init()
	file_FLEETDUTYKEYVALUEPAIR_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_CURRENTCHAPTERINFO_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CURRENTCHAPTERINFO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_CURRENTCHAPTERINFO_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_CURRENTCHAPTERINFO_proto_goTypes,
		DependencyIndexes: file_CURRENTCHAPTERINFO_proto_depIdxs,
		MessageInfos:      file_CURRENTCHAPTERINFO_proto_msgTypes,
	}.Build()
	File_CURRENTCHAPTERINFO_proto = out.File
	file_CURRENTCHAPTERINFO_proto_rawDesc = nil
	file_CURRENTCHAPTERINFO_proto_goTypes = nil
	file_CURRENTCHAPTERINFO_proto_depIdxs = nil
}
