package answer

import (
	"fmt"
	"strconv"

	"github.com/bettercallmolly/belfast/connection"
	"github.com/bettercallmolly/belfast/logger"
	"github.com/bettercallmolly/belfast/orm"
	"github.com/bettercallmolly/belfast/protobuf"
	"google.golang.org/protobuf/proto"
)

const (
	valid_auth_confirm_payload = "\x01\xf3\x00\x27\x25\x00\x00\x08\x00\x12\x49\x08\x01\x12\x18\x62" +
		"\x6c\x68\x78\x75\x73\x67\x73\x31\x61\x70\x69\x2e\x79\x6f\x2d\x73" +
		"\x74\x61\x72\x2e\x63\x6f\x6d\x18\x50\x20\x00\x2a\x06\x41\x76\x72" +
		"\x6f\x72\x61\x30\x00\x38\x01\x42\x17\x62\x6c\x68\x78\x75\x73\x70" +
		"\x72\x6f\x78\x79\x2e\x79\x6f\x2d\x73\x74\x61\x72\x2e\x63\x6f\x6d" +
		"\x48\xa1\x9c\x01\x12\x4c\x08\x02\x12\x18\x62\x6c\x68\x78\x75\x73" +
		"\x67\x73\x32\x61\x70\x69\x2e\x79\x6f\x2d\x73\x74\x61\x72\x2e\x63" +
		"\x6f\x6d\x18\x50\x20\x00\x2a\x09\x4c\x65\x78\x69\x6e\x67\x74\x6f" +
		"\x6e\x30\x01\x38\x02\x42\x17\x62\x6c\x68\x78\x75\x73\x70\x72\x6f" +
		"\x78\x79\x2e\x79\x6f\x2d\x73\x74\x61\x72\x2e\x63\x6f\x6d\x48\xa2" +
		"\x9c\x01\x12\x48\x08\x03\x12\x18\x62\x6c\x68\x78\x75\x73\x67\x73" +
		"\x33\x61\x70\x69\x2e\x79\x6f\x2d\x73\x74\x61\x72\x2e\x63\x6f\x6d" +
		"\x18\x50\x20\x00\x2a\x05\x53\x61\x6e\x64\x79\x30\x00\x38\x03\x42" +
		"\x17\x62\x6c\x68\x78\x75\x73\x70\x72\x6f\x78\x79\x2e\x79\x6f\x2d" +
		"\x73\x74\x61\x72\x2e\x63\x6f\x6d\x48\xa3\x9c\x01\x12\x4d\x08\x04" +
		"\x12\x18\x62\x6c\x68\x78\x75\x73\x67\x73\x34\x61\x70\x69\x2e\x79" +
		"\x6f\x2d\x73\x74\x61\x72\x2e\x63\x6f\x6d\x18\x50\x20\x00\x2a\x0a" +
		"\x57\x61\x73\x68\x69\x6e\x67\x74\x6f\x6e\x30\x00\x38\x04\x42\x17" +
		"\x62\x6c\x68\x78\x75\x73\x70\x72\x6f\x78\x79\x2e\x79\x6f\x2d\x73" +
		"\x74\x61\x72\x2e\x63\x6f\x6d\x48\xa4\x9c\x01\x12\x48\x08\x05\x12" +
		"\x18\x62\x6c\x68\x78\x75\x73\x67\x73\x35\x61\x70\x69\x2e\x79\x6f" +
		"\x2d\x73\x74\x61\x72\x2e\x63\x6f\x6d\x18\x50\x20\x00\x2a\x05\x41" +
		"\x6d\x61\x67\x69\x30\x01\x38\x05\x42\x17\x62\x6c\x68\x78\x75\x73" +
		"\x70\x72\x6f\x78\x79\x2e\x79\x6f\x2d\x73\x74\x61\x72\x2e\x63\x6f" +
		"\x6d\x48\xa5\x9c\x01\x12\x3b\x08\x06\x12\x18\x62\x6c\x68\x78\x75" +
		"\x73\x67\x73\x36\x61\x70\x69\x2e\x79\x6f\x2d\x73\x74\x61\x72\x2e" +
		"\x63\x6f\x6d\x18\x50\x20\x00\x2a\x11\x4c\x69\x74\x74\x6c\x65\x20" +
		"\x45\x6e\x74\x65\x72\x70\x72\x69\x73\x65\x30\x02\x38\x00\x42\x00" +
		"\x48\x00\x18\x9e\xa1\xd8\x02\x22\x2a\x31\x37\x30\x31\x38\x31\x36" +
		"\x32\x37\x37\x33\x64\x64\x32\x64\x64\x62\x35\x62\x39\x36\x38\x34" +
		"\x39\x39\x32\x31\x30\x65\x33\x37\x39\x37\x32\x35\x32\x37\x31\x34" +
		"\x38\x32\x30\x30\x08"
)

var protoValidAnswer protobuf.SC_10021

func updateServerList(announcedServers *[]orm.Server) {
	Servers = make([]*protobuf.SERVERINFO, len(*announcedServers))
	for i, server := range *announcedServers {
		Servers[i] = &protobuf.SERVERINFO{
			Ids:   []uint32{server.ID},
			Ip:    proto.String(server.IP),
			Port:  proto.Uint32(server.Port),
			State: proto.Uint32(*server.StateID),
			Name:  proto.String(server.Name),
			Sort:  proto.Uint32(uint32(i + 1)),
		}
	}
	protoValidAnswer.Serverlist = Servers
}

func Forge_SC10021(buffer *[]byte, client *connection.Client) (int, int, error) {
	var payload protobuf.CS_10020
	err := proto.Unmarshal(*buffer, &payload)
	if err != nil {
		return 0, 10021, fmt.Errorf("failed to unmarshal payload: %s", err.Error())
	}

	var accountId uint32
	intArg2, err := strconv.Atoi(payload.GetArg2())
	if err != nil {
		return 0, 10021, fmt.Errorf("failed to convert arg2 to int: %s", err.Error())
	}
	if err = orm.GormDB.
		Table("yostarus_maps").
		Where(orm.YostarusMap{Arg2: uint32(intArg2)}).
		Pluck("account_id", &accountId).
		Error; err != nil {
		return 0, 10021, fmt.Errorf("failed to fetch commander: %s", err.Error())
	}

	// Update server list
	var belfastServers []orm.Server
	err = orm.GormDB.Order("id asc").Find(&belfastServers).Error
	if err != nil {
		logger.LogEvent("Server", "SC_10021", fmt.Sprintf("failed to fetch servers: %s", err.Error()), logger.LOG_LEVEL_ERROR)
		return 0, 10021, err
	}
	updateServerList(&belfastServers)
	protoValidAnswer.AccountId = proto.Uint32(uint32(accountId))
	logger.LogEvent("Server", "SC_10021", fmt.Sprintf("sending %d servers", len(protoValidAnswer.Serverlist)), logger.LOG_LEVEL_WARN)
	return client.SendMessage(10021, &protoValidAnswer)
}

func init() {
	var validPayload protobuf.SC_10021
	err := proto.Unmarshal([]byte(valid_auth_confirm_payload)[7:], &validPayload)
	if err != nil {
		panic(err)
	}
	protoValidAnswer = validPayload
	protoValidAnswer.Serverlist = Servers
}
